CREATE TABLE departamento (
  codigo number(2)  PRIMARY KEY,
  nombre VARCHAR2(100) NOT NULL,
  presupuesto number (6)  NOT NULL,
  gastos number (6)  NOT NULL
);
CREATE TABLE empleado (
  codigo number(2)  PRIMARY KEY,
  nif VARCHAR2(9) NOT NULL UNIQUE,
  nombre VARCHAR2(100) NOT NULL,
  apellido1 VARCHAR2(100) NOT NULL,
  apellido2 VARCHAR2(100),
  codigo_departamento number(2),
  FOREIGN KEY (codigo_departamento) REFERENCES departamento(codigo)
);
INSERT INTO departamento VALUES(1, 'Desarrollo', 120000, 6000);
INSERT INTO departamento VALUES(2, 'Sistemas', 150000, 21000);
INSERT INTO departamento VALUES(3, 'Recursos Humanos', 280000, 25000);
INSERT INTO departamento VALUES(4, 'Contabilidad', 110000, 3000);
INSERT INTO departamento VALUES(5, 'I+D', 375000, 380000);
INSERT INTO departamento VALUES(6, 'Proyectos', 0, 0);
INSERT INTO departamento VALUES(7, 'Publicidad', 0, 1000);

INSERT INTO empleado VALUES(1, '32481596F', 'Aarón', 'Rivero', 'Gómez', 1);
INSERT INTO empleado VALUES(2, 'Y5575632D', 'Adela', 'Salas', 'Díaz', 2);
INSERT INTO empleado VALUES(3, 'R6970642B', 'Adolfo', 'Rubio', 'Flores', 3);
INSERT INTO empleado VALUES(4, '77705545E', 'Adrián', 'Suárez', NULL, 4);
INSERT INTO empleado VALUES(5, '17087203C', 'Marcos', 'Loyola', 'Méndez', 5);
INSERT INTO empleado VALUES(6, '38382980M', 'María', 'Santana', 'Moreno', 1);
INSERT INTO empleado VALUES(7, '80576669X', 'Pilar', 'Ruiz', NULL, 2);
INSERT INTO empleado VALUES(8, '71651431Z', 'Pepe', 'Ruiz', 'Santana', 3);
INSERT INTO empleado VALUES(9, '56399183D', 'Juan', 'Gómez', 'López', 2);
INSERT INTO empleado VALUES(10, '46384486H', 'Diego','Flores', 'Salas', 5);
INSERT INTO empleado VALUES(11, '67389283A', 'Marta','Herrera', 'Gil', 1);
INSERT INTO empleado VALUES(12, '41234836R', 'Irene','Salas', 'Flores', NULL);
INSERT INTO empleado VALUES(13, '82635162B', 'Juan Antonio','Sáez', 'Guerrero', NULL);

--1. Lista el primer apellido de todos los empleados.
SELECT APELLIDO1
FROM EMPLEADO;

--2. Lista el primer apellido de los empleados eliminando los apellidos que estén repetidos.
SELECT DISTINCT APELLIDO1
FROM EMPLEADO;

--3. Lista todas las columnas de la tabla empleado.
SELECT *
FROM EMPLEADO;

--4. Lista el nombre y los apellidos de todos los empleados
SELECT NOMBRE, APELLIDO1, APELLIDO2
FROM EMPLEADO;

--5. Lista el código de los departamentos de los empleados que aparecen en la tabla empleado
SELECT CODIGO_DEPARTAMENTO
FROM EMPLEADO;

--6. Lista el código de los departamentos de los empleados que aparecen en la tabla empleado, 
--eliminando los códigos que aparecen repetidos.
SELECT DISTINCT CODIGO_DEPARTAMENTO
FROM EMPLEADO;

--7. Lista el nombre y apellidos de los empleados en una única columna.
SELECT NOMBRE||' '||APELLIDO1 ||' '|| APELLIDO2 AS NOMBRE_COMPLETO
FROM EMPLEADOS;

--8. Lista el nombre y apellidos de los empleados en una única columna, convirtiendo todos los caracteres en mayúscula.
SELECT UPPER (NOMBRE||' '||APELLIDO1 ||' '|| APELLIDO2) AS NOMBRE_COMPLETO
FROM EMPLEADOS;

--9. Lista el nombre y apellidos de los empleados en una única columna, convirtiendo todos los caracteres en minúscula.
SELECT LOWER (NOMBRE||' '||APELLIDO1 ||' '|| APELLIDO2) AS NOMBRE_COMPLETO
FROM EMPLEADOS;

--10. Lista el código de los empleados junto al nif, pero el nif deberá aparecer en dos columnas, una mostrará únicamente 
--los dígitos del nif y la otra la letra
SELECT SUBSTR(NIF,1,8) NUMERO_NIF,SUBSTR(NIF,9,1) LETRA_NIF
FROM EMPLEADO

--11.Lista el nombre de cada departamento y el valor del presupuesto actual del que dispone. Para calcular este dato tendrá 
--que restar al valor del presupuesto inicial (columna presupuesto) los gastos que se han generado (columna gastos). Tenga 
--en cuenta que en algunos casos pueden existir valores negativos. Utilice un alias apropiado para la nueva columna columna 
--que está calculando.
SELECT NOMBRE, (PRESUPUESTO-GASTOS) AS VALOR_PRESUPUESTO_INICIAL
FROM DEPARTAMENTO;

--12.Lista el nombre de los departamentos y el valor del presupuesto actual ordenado de forma ascendente.
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
ORDER BY PRESUPUESTO;

--13.Lista el nombre de todos los departamentos ordenados de forma ascendente.
SELECT NOMBRE
FROM DEPARTAMENTO
ORDER BY NOMBRE ASC;

--14.Lista el nombre de todos los departamentos ordenados de forma desscendente.
SELECT NOMBRE
FROM DEPARTAMENTO
ORDER BY NOMBRE DESC;

--15.Lista los apellidos y el nombre de todos los empleados, ordenados de forma alfabética tendiendo en cuenta en primer lugar 
--sus apellidos y luego su nombre.
SELECT APELLIDO1, APELLIDO2, NOMBRE
FROM EMPLEADO
ORDER BY APELLIDO1, APELLIDO2;

--16.Devuelve una lista con el nombre y el presupuesto, de los 3 departamentos que tienen mayor presupuesto.
SELECT D.PRESUPUESTO
FROM DEPARTAMENTO D
WHERE ROWNUM<=3
ORDER BY PRESUPUESTO DESC;

--17.Devuelve una lista con el nombre y el presupuesto, de los 3 departamentos que tienen menor presupuesto.
SELECT D.PRESUPUESTO
FROM DEPARTAMENTO D
WHERE ROWNUM<=3
ORDER BY PRESUPUESTO ASC;

--18.Devuelve una lista con el nombre y el gasto, de los 2 departamentos que tienen mayor gasto.
SELECT D.GASTOS
FROM DEPARTAMENTO D
WHERE ROWNUM<=2
ORDER BY PRESUPUESTO DESC;

--19.Devuelve una lista con el nombre y el gasto, de los 2 departamentos que tienen menor gasto.
SELECT D.GASTOS
FROM DEPARTAMENTO D
WHERE ROWNUM<=2
ORDER BY PRESUPUESTO ASC;

--20.Devuelve una lista con 5 filas a partir de la tercera fila de la tabla empleado. La tercera fila se debe incluir en la 
--respuesta. La respuesta debe incluir todas las columnas de la tabla empleado.
SELECT * 
FROM fabricante
ORDER BY CODIGO
OFFSET 2 ROWS FETCH NEXT 5 ROWS ONLY;

--21.Devuelve una lista con el nombre de los departamentos y el presupuesto, de aquellos que tienen un presupuesto mayor o 
--igual a 150000 euros.
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
WHERE PRESUPUESTO >15000;

--22.Devuelve una lista con el nombre de los departamentos y el gasto, de aquellos que tienen menos de 5000 euros de gastos.
SELECT NOMBRE, GASTOS
FROM DEPARTAMENTO
WHERE GASTOS <5000;

--23.Devuelve una lista con el nombre de los departamentos y el presupesto, de aquellos que tienen un presupuesto entre 
--100000 y 200000 euros. Sin utilizar el operador BETWEEN
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
WHERE PRESUPUESTO >100000 AND PRESUPUESTO <200000;

--24.Devuelve una lista con el nombre de los departamentos que no tienen un presupuesto entre 100000 y 200000 euros. Sin utilizar 
--el operador BETWEEN.
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
WHERE PRESUPUESTO <100000 OR PRESUPUESTO >200000;

--25.Devuelve una lista con el nombre de los departamentos que tienen un presupuesto entre 100000 y 200000 euros. Utilizando el 
--operador BETWEEN.
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
WHERE PRESUPUESTO BETWEEN 100000 AND 200000;

--26.Devuelve una lista con el nombre de los departamentos que no tienen un presupuesto entre 100000 y 200000 euros. Utilizando el 
--operador BETWEEN.
SELECT NOMBRE, PRESUPUESTO
FROM DEPARTAMENTO
WHERE PRESUPUESTO NOT BETWEEN 100000 AND 200000;

--27.Devuelve una lista con el nombre de los departamentos, gastos y presupuesto, de quellos departamentos donde los gastos sean 
--mayores que el presupuesto del que disponen.
SELECT NOMBRE, PRESUPUESTO, GASTOS
FROM DEPARTAMENTO
WHERE GASTOS>PRESUPUESTO;

--28.Devuelve una lista con el nombre de los departamentos, gastos y presupuesto, de aquellos departamentos donde los gastos sean 
--menores que el presupuesto del que disponen.
SELECT NOMBRE, PRESUPUESTO, GASTOS
FROM DEPARTAMENTO
WHERE GASTOS<PRESUPUESTO;

--29.Devuelve una lista con el nombre de los departamentos, gastos y presupuesto, de aquellos departamentos donde los gastos sean 
--iguales al presupuesto del que disponen.
SELECT NOMBRE, PRESUPUESTO, GASTOS
FROM DEPARTAMENTO
WHERE GASTOS=PRESUPUESTO;

--30.Lista todos los datos de los empleados cuyo segundo apellido sea NULL.
SELECT *
FROM EMPLEADO
WHERE APELLIDO2 IS NULL;

--31.Lista todos los datos de los empleados cuyo segundo apellido no sea NULL.
SELECT *
FROM EMPLEADO
WHERE APELLIDO2 IS NOT NULL;

--32.Lista todos los datos de los empleados cuyo segundo apellido sea López.
SELECT *
FROM EMPLEADO
WHERE APELLIDO2 IN ('López');

--33.Lista todos los datos de los empleados cuyo segundo apellido sea Díaz o Moreno. Sin utilizar el operador IN.
SELECT *
FROM EMPLEADO
WHERE APELLIDO2 = 'Díaz'
OR APELLIDO2 = 'Moreno';

--34.Lista todos los datos de los empleados cuyo segundo apellido sea Díaz o Moreno. Utilizando el operador IN.
SELECT *
FROM EMPLEADO
WHERE APELLIDO2 IN ('Díaz', 'Moreno');

--35.Lista los nombres, apellidos y nif de los empleados que trabajan en el departamento 3.
SELECT NOMBRE, APELLIDO1, APELLIDO2, NIF
FROM EMPLEADO
WHERE CODIGO IN '3';

--36.Lista los nombres, apellidos y nif de los empleados que trabajan en los departamentos 2, 4 o 5.
SELECT NOMBRE, APELLIDO1, APELLIDO2, NIF
FROM EMPLEADO
WHERE CODIGO IN ('3','4','5');

--1.2.4 Consultas multitabla (Composición interna)
--1.Devuelve un listado con los empleados y los datos de los departamentos donde trabaja cada uno.
SELECT E.NIF, E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.CODIGO, D.NOMBRE
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO=D.CODIGO;

--2.Devuelve un listado con los empleados y los datos de los departamentos donde trabaja cada uno. Ordena el resultado, 
--en primer lugar por el nombre del departamento (en orden alfabético) y en segundo lugar por los apellidos y el nombre 
--de los empleados.
SELECT E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
ORDER BY D.NOMBRE ASC, E.APELLIDO1, E.APELLIDO2, E. NOMBRE;

--3.Devuelve un listado con el código y el nombre del departamento, solamente de aquellos departamentos que tienen empleados.
SELECT DISTINCT D.CODIGO, D.NOMBRE, E.CODIGO_DEPARTAMENTO
FROM DEPARTAMENTO D
JOIN EMPLEADO E
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.NOMBRE IS NOT NULL
ORDER BY D.CODIGO ASC;

--4.Devuelve un listado con el código, el nombre del departamento y el valor del presupuesto actual del que dispone, solamente 
--de aquellos departamentos que tienen empleados. El valor del presupuesto actual lo puede calcular restando al valor del 
--presupuesto inicial (columna presupuesto) el valor de los gastos que ha generado (columna gastos).
SELECT D.CODIGO,D.NOMBRE, (D.PRESUPUESTO-D.GASTOS) AS PRESUPUESTO_ACTUAL
FROM DEPARTAMENTO D
INNER JOIN EMPLEADO E
ON E.CODIGO_DEPARTAMENTO=D.CODIGO

--5.Devuelve el nombre del departamento donde trabaja el empleado que tiene el nif 38382980M.
SELECT D.NOMBRE, E.NIF
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE E.NIF IN '38382980M';

--6.Devuelve el nombre del departamento donde trabaja el empleado Pepe Ruiz Santana.
SELECT  D.NOMBRE, E.NOMBRE, E.APELLIDO1, E.APELLIDO2
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE E.NOMBRE IN 'Pepe'
AND E. APELLIDO1 IN 'Ruiz'
AND E.APELLIDO2 IN 'Santana';

--7.Devuelve un listado con los datos de los empleados que trabajan en el departamento de I+D. Ordena el resultado alfabéticamente.
SELECT E.NIF, E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.NOMBRE IN 'I+D'
ORDER BY E.NOMBRE ASC;

--8.Devuelve un listado con los datos de los empleados que trabajan en el departamento de Sistemas, Contabilidad o I+D. Ordena el 
--resultado alfabéticamente.
SELECT E.NIF, E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.NOMBRE IN 'I+D'
OR D.NOMBRE IN 'Contabilidad'
OR D.NOMBRE IN 'Sistemas'
ORDER BY E.NOMBRE ASC;

--9. Devuelve una lista con el nombre de los empleados que tienen los departamentos que no tienen un presupuesto entre 100000 
--y 200000 euros.
SELECT E.NOMBRE, D.NOMBRE, D.PRESUPUESTO
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.PRESUPUESTO <100000
OR D.PRESUPUESTO >200000;

--10.Devuelve un listado con el nombre de los departamentos donde existe algún empleado cuyo segundo apellido sea NULL. Tenga 
--en cuenta que no debe mostrar nombres de departamentos que estén repetidos.
SELECT DISTINCT E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
JOIN DEPARTAMENTO D
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE E.APELLIDO2 IS NULL;

--Consultas multitabla (Composicion externa)
--1.Devuelve un listado con todos los empleados junto con los datos de los departamentos donde trabajan. Este listado también debe 
--incluir los empleados que no tienen ningún departamento asociado.
SELECT E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
LEFT OUTER JOIN DEPARTAMENTO D
    ON E.CODIGO_DEPARTAMENTO = D.CODIGO;

--2.Devuelve un listado donde sólo aparezcan aquellos empleados que no tienen ningún departamento asociado.
SELECT E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
LEFT OUTER JOIN DEPARTAMENTO D
    ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.NOMBRE IS NULL;

--3.Devuelve un listado donde sólo aparezcan aquellos departamentos que no tienen ningún empleado asociado.
SELECT D.NOMBRE, E.NOMBRE, E.APELLIDO1, E.APELLIDO2
FROM DEPARTAMENTO D
LEFT OUTER JOIN EMPLEADO E
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE E.CODIGO_DEPARTAMENTO IS NULL;

--4.Devuelve un listado con todos los empleados junto con los datos de los departamentos donde trabajan. El listado debe 
--incluir los empleados que no tienen ningún departamento asociado y los departamentos que no tienen ningún empleado asociado. 
--Ordene el listado alfabéticamente por el nombre del departamento.
SELECT D.NOMBRE, E.NOMBRE, E.APELLIDO1, E.APELLIDO2
FROM DEPARTAMENTO D
FULL OUTER JOIN EMPLEADO E
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
ORDER BY D.NOMBRE ASC;

--5.Devuelve un listado con los empleados que no tienen ningún departamento asociado y los departamentos que no tienen ningún 
--empleado asociado. Ordene el listado alfabéticamente por el nombre del departamento.
SELECT E.NOMBRE, E.APELLIDO1, E.APELLIDO2, D.NOMBRE
FROM EMPLEADO E
LEFT OUTER JOIN DEPARTAMENTO D
    ON E.CODIGO_DEPARTAMENTO = D.CODIGO
WHERE D.NOMBRE IS NULL
UNION ALL
SELECT D.NOMBRE, E.NOMBRE, E.APELLIDO1, E.APELLIDO2
    FROM DEPARTAMENTO D
    LEFT OUTER JOIN EMPLEADO E
	ON E.CODIGO_DEPARTAMENTO = D.CODIGO
    WHERE E.CODIGO_DEPARTAMENTO IS NULL

--Consultas resumen
--1.Calcula la suma del presupuesto de todos los departamentos.
	SELECT SUM(PRESUPUESTO) AS PRESUPUESTO_TOTAL
    FROM DEPARTAMENTO;
	
--2.Calcula la media del presupuesto de todos los departamentos.
	SELECT AVG(PRESUPUESTO) AS PRESUPUESTO_MEDIA
    FROM DEPARTAMENTO;

--3.Calcula el valor mínimo del presupuesto de todos los departamentos.
	SELECT MIN(PRESUPUESTO) AS PRESUPUESTO_MEDIA
    FROM DEPARTAMENTO;

--4.Calcula el nombre del departamento y el presupuesto que tiene asignado, del departamento con menor presupuesto.
	SELECT NOMBRE,PRESUPUESTO
	FROM DEPARTAMENTO
	WHERE PRESUPUESTO IN(SELECT MIN(PRESUPUESTO)
							FROM DEPARTAMENTO);

--5.Calcula el valor máximo del presupuesto de todos los departamentos.
	SELECT MAX(PRESUPUESTO)
	FROM DEPARTAMENTO;

--6.Calcula el nombre del departamento y el presupuesto que tiene asignado, del departamento con mayor presupuesto.	
	SELECT NOMBRE,PRESUPUESTO
	FROM DEPARTAMENTO
	WHERE PRESUPUESTO IN(SELECT  MAX(PRESUPUESTO)
							FROM DEPARTAMENTO);

--7.Calcula el número total de empleados que hay en la tabla empleado.	
	SELECT COUNT(CODIGO) AS NUM_EMPLEADOS
	FROM EMPLEADO;	

--8.Calcula el número de empleados que no tienen NULL en su segundo apellido.
	SELECT COUNT(CODIGO) AS NUM_EMPLEADOS
	FROM EMPLEADO
	WHERE APELLIDO2 IS NOT NULL;	

--9.Calcula el número de empleados que hay en cada departamento. 
----Tienes que devolver dos columnas, una con el nombre del departamento y otra con el número de empleados que tiene asignados.	
	SELECT D.NOMBRE, COUNT(*) AS NUM_EMPLEADOS
	FROM DEPARTAMENTO D, EMPLEADO E
	WHERE D.CODIGO=E.CODIGO_DEPARTAMENTO
	GROUP BY D.NOMBRE;

--10.Calcula el nombre de los departamentos que tienen más de 2 empleados. 
-----El resultado debe tener dos columnas, una con el nombre del departamento y otra con el número de empleados que tiene asignados.
	SELECT D.NOMBRE, COUNT(*) AS NUM_EMPLEADOS
	FROM DEPARTAMENTO D, EMPLEADO E
	WHERE D.CODIGO=E.CODIGO_DEPARTAMENTO
	GROUP BY D.NOMBRE
    HAVING COUNT(*)>2;

--11.Calcula el número de empleados que trabajan en cada uno de los departamentos. 
-----El resultado de esta consulta también tiene que incluir aquellos departamentos que no tienen ningún empleado asociado.	
	SELECT D.NOMBRE, COUNT(*) AS NUM_EMPLEADOS
	FROM DEPARTAMENTO D
	FULL OUTER JOIN EMPLEADO E
	ON D.CODIGO=E.CODIGO_DEPARTAMENTO
	GROUP BY D.NOMBRE;

--12.Calcula el número de empleados que trabajan en cada unos de los departamentos que tienen un presupuesto mayor a 200000 euros.	
	SELECT D.NOMBRE, COUNT(*) AS NUM_EMPLEADOS
	FROM DEPARTAMENTO D, EMPLEADO E
	WHERE D.CODIGO=E.CODIGO_DEPARTAMENTO AND D.PRESUPUESTO>200000
	GROUP BY D.NOMBRE;

--Subconsultas
--1. Devuelve un listado con todos los empleados que tiene el departamento de Sistemas. (Sin utilizar INNER JOIN).
	SELECT E.NIF, D.NOMBRE
	FROM EMPLEADO E, DEPARTAMENTO D
	WHERE E.CODIGO_DEPARTAMENTO=D.CODIGO
	AND D.NOMBRE='Sistemas';
	
--2. Devuelve el nombre del departamento con mayor presupuesto y la cantidad que tiene asignada.
	SELECT Nombre, Presupuesto
	FROM DEPARTAMENTO
	WHERE Presupuesto = (SELECT MAX(Presupuesto) FROM DEPARTAMENTO);

--3. Devuelve el nombre del departamento con menor presupuesto y la cantidad que tiene asignada.
	SELECT Nombre, Presupuesto
	FROM DEPARTAMENTO
	WHERE Presupuesto = (SELECT MIN(Presupuesto) FROM DEPARTAMENTO);
	
--Subconsultas con ALL y ANY
--4. Devuelve el nombre del departamento con mayor presupuesto y la cantidad que tiene asignada. Sin hacer uso de MAX, ORDER BY ni LIMIT.
	SELECT NOMBRE, PRESUPUESTO
	FROM DEPARTAMENTO
	WHERE PRESUPUESTO = ANY 
	(SELECT PRESUPUESTO FROM DEPARTAMENTO WHERE PRESUPUESTO = 375000);

--5. Devuelve el nombre del departamento con menor presupuesto y la cantidad que tiene asignada. Sin hacer uso de MIN, ORDER BY ni LIMIT.
	SELECT NOMBRE, PRESUPUESTO
	FROM DEPARTAMENTO
	WHERE PRESUPUESTO = ANY 
	(SELECT PRESUPUESTO FROM DEPARTAMENTO WHERE PRESUPUESTO = 110000);

--6. Devuelve los nombres de los departamentos que no tienen empleados asociados. (Utilizando ALL o ANY).
	SELECT D.NOMBRE 
	FROM DEPARTAMENTO D
	WHERE D.CODIGO=ANY
	(SELECT CODIGO_DEPARTAMENTO FROM EMPLEADO E WHERE CODIGO_DEPARTAMENTO=D.CODIGO)

--7. Devuelve los nombres de los departamentos que no tienen empleados asociados. (Utilizando ALL o ANY).
	SELECT D.NOMBRE 
	FROM DEPARTAMENTO D
	WHERE D.CODIGO!=ALL
	(SELECT CODIGO_DEPARTAMENTO FROM EMPLEADO E WHERE CODIGO_DEPARTAMENTO=D.CODIGO);

--Subconsultas con IN y NOT IN
--8. Devuelve los nombres de los departamentos que tienen empleados asociados. (Utilizando IN o NOT IN).
	SELECT D.NOMBRE
	FROM DEPARTAMENTO D
	WHERE  D.CODIGO IN
	(SELECT CODIGO_DEPARTAMENTO 
	FROM EMPLEADO
	WHERE CODIGO_DEPARTAMENTO=D.CODIGO);

--9. Devuelve los nombres de los departamentos que no tienen empleados asociados. (Utilizando IN o NOT IN).
	SELECT D.NOMBRE
	FROM DEPARTAMENTO D
	WHERE  D.CODIGO NOT IN
	(SELECT CODIGO_DEPARTAMENTO 
	FROM EMPLEADO
	WHERE CODIGO_DEPARTAMENTO=D.CODIGO);

--Subconsultas con EXISTS y NOT EXISTS
--10. Devuelve los nombres de los departamentos que tienen empleados asociados. (Utilizando EXISTS o NOT EXISTS).
	SELECT D.NOMBRE
	FROM DEPARTAMENTO D
	WHERE EXISTS
	(SELECT CODIGO_DEPARTAMENTO 
     FROM EMPLEADO
     WHERE CODIGO_DEPARTAMENTO=D.CODIGO);

--11. Devuelve los nombres de los departamentos que tienen empleados asociados. (Utilizando EXISTS o NOT EXISTS).
	SELECT D.NOMBRE
	FROM DEPARTAMENTO D
	WHERE NOT EXISTS
    (SELECT CODIGO_DEPARTAMENTO 
     FROM EMPLEADO
     WHERE CODIGO_DEPARTAMENTO=D.CODIGO);

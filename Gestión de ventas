CREATE TABLE cliente (
  id INT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido1 VARCHAR(100) NOT NULL,
  apellido2 VARCHAR(100),                                             -------1.3.3-------
  ciudad VARCHAR(100),                                               ----------------------
  categoría INT
);

CREATE TABLE comercial (
  id INT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  apellido1 VARCHAR(100) NOT NULL,
  apellido2 VARCHAR(100),
  comisión FLOAT
);

CREATE TABLE pedido (
  id INT PRIMARY KEY,
  total NUMBER(6,1) NOT NULL,
  fecha DATE,
  id_cliente NUMBER(20) NOT NULL,
  id_comercial NUMBER(20) NOT NULL,
  CONSTRAINT fk_cliente FOREIGN KEY (id_cliente) REFERENCES cliente(id),
  CONSTRAINT fk_comercial FOREIGN KEY (id_comercial) REFERENCES comercial(id)
);

INSERT INTO cliente VALUES(1, 'Aarón', 'Rivero', 'Gómez', 'Almería', 100);
INSERT INTO cliente VALUES(2, 'Adela', 'Salas', 'Díaz', 'Granada', 200);
INSERT INTO cliente VALUES(3, 'Adolfo', 'Rubio', 'Flores', 'Sevilla', NULL);
INSERT INTO cliente VALUES(4, 'Adrián', 'Suárez', NULL, 'Jaén', 300);
INSERT INTO cliente VALUES(5, 'Marcos', 'Loyola', 'Méndez', 'Almería', 200);
INSERT INTO cliente VALUES(6, 'María', 'Santana', 'Moreno', 'Cádiz', 100);
INSERT INTO cliente VALUES(7, 'Pilar', 'Ruiz', NULL, 'Sevilla', 300);
INSERT INTO cliente VALUES(8, 'Pepe', 'Ruiz', 'Santana', 'Huelva', 200);
INSERT INTO cliente VALUES(9, 'Guillermo', 'López', 'Gómez', 'Granada', 225);
INSERT INTO cliente VALUES(10, 'Daniel', 'Santana', 'Loyola', 'Sevilla', 125);

INSERT INTO comercial VALUES(1, 'Daniel', 'Sáez', 'Vega', 0.15);
INSERT INTO comercial VALUES(2, 'Juan', 'Gómez', 'López', 0.13);
INSERT INTO comercial VALUES(3, 'Diego','Flores', 'Salas', 0.11);
INSERT INTO comercial VALUES(4, 'Marta','Herrera', 'Gil', 0.14);
INSERT INTO comercial VALUES(5, 'Antonio','Carretero', 'Ortega', 0.12);
INSERT INTO comercial VALUES(6, 'Manuel','Domínguez', 'Hernández', 0.13);
INSERT INTO comercial VALUES(7, 'Antonio','Vega', 'Hernández', 0.11);
INSERT INTO comercial VALUES(8, 'Alfredo','Ruiz', 'Flores', 0.05);

INSERT INTO pedido VALUES(1, 150.5, TO_DATE('2017-10-05', 'YYYY/MM/DD'), 5, 2);
INSERT INTO pedido VALUES(2, 270.65, TO_DATE('2016-09-10','YYYY/MM/DD'), 1, 5);
INSERT INTO pedido VALUES(3, 65.26, TO_DATE('2017-10-05','YYYY/MM/DD'), 2, 1);
INSERT INTO pedido VALUES(4, 110.5, TO_DATE('2016-08-17','YYYY/MM/DD'), 8, 3);
INSERT INTO pedido VALUES(5, 948.5, TO_DATE('2017-09-10','YYYY/MM/DD'), 5, 2);
INSERT INTO pedido VALUES(6, 2400.6, TO_DATE('2016-07-27','YYYY/MM/DD'), 7, 1);
INSERT INTO pedido VALUES(7, 5760, TO_DATE('2015-09-10','YYYY/MM/DD'), 2, 1);
INSERT INTO pedido VALUES(8, 1983.43, TO_DATE('2017-10-10','YYYY/MM/DD'), 4, 6);
INSERT INTO pedido VALUES(9, 2480.4, TO_DATE('2016-10-10','YYYY/MM/DD'), 8, 3);
INSERT INTO pedido VALUES(10, 250.45, TO_DATE('2015-06-27','YYYY/MM/DD'), 8, 2);
INSERT INTO pedido VALUES(11, 75.29, TO_DATE('2016-08-17','YYYY/MM/DD'), 3, 7);
INSERT INTO pedido VALUES(12, 3045.6, TO_DATE('2017-04-25','YYYY/MM/DD'), 2, 1);
INSERT INTO pedido VALUES(13, 545.75, TO_DATE('2019-01-25','YYYY/MM/DD'), 6, 1);
INSERT INTO pedido VALUES(14, 145.82, TO_DATE('2017-02-02','YYYY/MM/DD'), 6, 1);
INSERT INTO pedido VALUES(15, 370.85, TO_DATE('2019-03-11','YYYY/MM/DD'), 1, 5);
INSERT INTO pedido VALUES(16, 2389.23, TO_DATE('2019-03-11','YYYY/MM/DD'), 1, 5);

--1.Devuelve un listado con todos los pedidos que se han realizado. Los pedidos deben estar ordenados por la fecha de realización, mostrando en primer 
--lugar los pedidos más recientes.
SELECT ID, TOTAL, FECHA
FROM PEDIDO
ORDER BY FECHA DESC;

--2.Devuelve todos los datos de los dos pedidos de mayor valor.
SELECT*
FROM PEDIDO
ORDER BY TOTAL DESC
FETCH NEXT 2 ROWS ONLY;

--3.Devuelve un listado con los identificadores de los clientes que han realizado algún pedido. Tenga en cuenta que no debe mostrar identificadores que 
--estén repetidos.
SELECT DISTINCT ID_CLIENTE
FROM PEDIDO;

--4.Devuelve un listado de todos los pedidos que se realizaron durante el año 2017, cuya cantidad total sea superior a 500€.
SELECT*
FROM PEDIDO
WHERE fecha BETWEEN '01/01/2017' AND '31/12/2017' AND TOTAL>500;

--5.Devuelve un listado con el nombre y los apellidos de los comerciales que tienen una comisión entre 0.05 y 0.11.
SELECT NOMBRE, APELLIDO1, APELLIDO2
FROM COMERCIAL
WHERE COMISIÓN BETWEEN '0,05' AND '0,11' ;

--6.Devuelve el valor de la comisión de mayor valor que existe en la tabla comercial.
SELECT   MAX (COMISIÓN)
FROM COMERCIAL;

--7.Devuelve el identificador, nombre y primer apellido de aquellos clientes cuyo segundo apellido no es NULL. El listado deberá estar ordenado 
--alfabéticamente por apellidos y nombre.
SELECT ID, NOMBRE, APELLIDO1 
FROM CLIENTE
WHERE APELLIDO2 IS NOT NULL
ORDER BY NOMBRE,APELLIDO1 ASC;

--8.Devuelve un listado de los nombres de los clientes que empiezan por A y terminan por n y también los nombres que empiezan por P. El listado deberá 
--estar ordenado alfabéticamente.
SELECT nombre 
FROM CLIENTE
WHERE  NOMBRE LIKE 'A%' OR NOMBRE LIKE '%n' OR NOMBRE LIKE 'P%'
ORDER BY NOMBRE  ASC;  

--9.Devuelve un listado de los nombres de los clientes que no empiezan por A. El listado deberá estar ordenado alfabéticamente.
SELECT nombre 
FROM CLIENTE  
WHERE NOMBRE LIKE  'A%';

--10.Devuelve un listado con los nombres de los comerciales que terminan por el o o. Tenga en cuenta que se deberán eliminar los nombres repetidos.
SELECT  distinct NOMBRE 
FROM COMERCIAL
WHERE NOMBRE LIKE  '%o';
	
--Consultas multitabla. Composicion interna
--1.Devuelve un listado con el identificador, nombre y los apellidos de todos los clientes que han realizado algún pedido. El listado debe estar 
--ordenado alfabéticamente y se deben eliminar los elementos repetidos.
SELECT DISTINCT C.ID, C.NOMBRE, C.APELLIDO1, C.APELLIDO2
FROM CLIENTE C
JOIN PEDIDO P
ON P.ID_CLIENTE = C.ID
ORDER BY NOMBRE;

--2.Devuelve un listado que muestre todos los pedidos que ha realizado cada cliente. El resultado debe mostrar todos los datos de los pedidos y 
--del cliente. El listado debe mostrar los datos de los clientes ordenados alfabéticamente.
SELECT *
FROM PEDIDO P, CLIENTE C
WHERE C.ID = P.ID_CLIENTE
ORDER BY NOMBRE;

--3.Devuelve un listado que muestre todos los pedidos en los que ha participado un comercial. El resultado debe mostrar todos los datos de los 
--pedidos y de los comerciales. El listado debe mostrar los datos de los comerciales ordenados alfabéticamente.
SELECT *
FROM PEDIDO P, COMERCIAL CO
WHERE CO.ID = P.ID_COMERCIAL
ORDER BY CO.NOMBRE;

--4.Devuelve un listado que muestre todos los clientes, con todos los pedidos que han realizado y con los datos de los comerciales asociados a 
--cada pedido.
SELECT C.NOMBRE, C.APELLIDO1, C.APELLIDO2, CO.ID, CO.NOMBRE, CO.APELLIDO1, CO.APELLIDO2, P.ID, P.TOTAL
FROM CLIENTE C, PEDIDO P, COMERCIAL CO
WHERE C.ID = P.ID_CLIENTE
    AND CO.ID = P.ID_COMERCIAL;

--5.Devuelve un listado de todos los clientes que realizaron un pedido durante el año 2017, cuya cantidad esté entre 300 € y 1000 €.
SELECT C.NOMBRE, C.APELLIDO1, C.APELLIDO2, P.FECHA, P.TOTAL
FROM CLIENTE C, PEDIDO P
WHERE C.ID = p.id_cliente
    AND P.FECHA BETWEEN '01/01/2017' AND '31/12/2017'
    AND P.TOTAL BETWEEN '300' AND '1000';

--6.Devuelve el nombre y los apellidos de todos los comerciales que ha participado en algún pedido realizado por María Santana Moreno.
SELECT CO.NOMBRE, CO.APELLIDO1, CO.APELLIDO2
FROM CLIENTE C, PEDIDO P, COMERCIAL CO
WHERE CO.ID = P.ID_COMERCIAL
    AND C.ID = P.ID_CLIENTE
    AND C.NOMBRE = 'Maria' AND C.APELLIDO1 = 'Santana' AND C.APELLIDO2 = 'Moreno';

--7.Devuelve el nombre de todos los clientes que han realizado algún pedido con el comercial Daniel Sáez Vega.
SELECT C.NOMBRE
FROM CLIENTE C, PEDIDO P, COMERCIAL CO
WHERE CO.ID = P.ID_COMERCIAL
    AND C.ID = P.ID_CLIENTE
    AND CO.NOMBRE = 'Daniel' AND CO.APELLIDO1 = 'Saez' AND CO.APELLIDO2 = 'Vega';
	
--Consultas multitabla Composicion externa
--1.Devuelve un listado con todos los clientes junto con los datos de los pedidos que han realizado. Este listado también debe incluir los clientes que no 
--han realizado ningún pedido. El listado debe estar ordenado alfabéticamente por el primer apellido, segundo apellido y nombre de los clientes.
SELECT C.NOMBRE, C.APELLIDO1, C.APELLIDO2, P.ID, P.TOTAL, P.FECHA
FROM CLIENTE C
    LEFT JOIN PEDIDO P
        ON C.ID = P.ID_CLIENTE
    ORDER BY C.APELLIDO1, C.APELLIDO2, C.NOMBRE

--2.Devuelve un listado con todos los comerciales junto con los datos de los pedidos que han realizado. Este listado también debe incluir los comerciales 
--que no han realizado ningún pedido. El listado debe estar ordenado alfabéticamente por el primer apellido, segundo apellido y nombre de los comerciales.
SELECT CO.NOMBRE, CO.APELLIDO1, CO.APELLIDO2, P.ID, P.FECHA, P.TOTAL
FROM COMERCIAL CO
    LEFT JOIN PEDIDO P
        ON CO.ID = P.ID_COMERCIAL
    ORDER BY CO.APELLIDO1, CO.APELLIDO2, CO.NOMBRE

--3.Devuelve un listado que solamente muestre los clientes que no han realizado ningún pedido.
SELECT C.NOMBRE, C.APELLIDO1, C.APELLIDO2, C.ID
FROM CLIENTE C
    LEFT JOIN PEDIDO P
        ON C.ID = P.ID_CLIENTE
     WHERE P.ID IS NULL

--4.Devuelve un listado que solamente muestre los comerciales que no han realizado ningún pedido.
SELECT CO.NOMBRE, CO.APELLIDO1, CO.APELLIDO2 
    FROM COMERCIAL CO
        LEFT JOIN PEDIDO P
            ON CO.ID = P.ID_COMERCIAL
        WHERE P.ID IS NULL

--5.Devuelve un listado con los clientes que no han realizado ningún pedido y de los comerciales que no han participado en ningún pedido. Ordene el 
--listado alfabéticamente por los apellidos y el nombre. En en listado deberá diferenciar de algún modo los clientes y los comerciales.
SELECT CO.NOMBRE, CO.APELLIDO1, CO.APELLIDO2, C.NOMBRE, C.APELLIDO1, C.APELLIDO2
FROM PEDIDO P
    FULL JOIN COMERCIAL CO
        ON P.ID_COMERCIAL = CO.ID
    FULL JOIN CLIENTE C 
        ON C.ID = P.ID_CLIENTE
    WHERE P.ID IS NULL;

--Consultas resumen
--1.Calcula la cantidad total que suman todos los pedidos que aparecen en la tabla pedido.
SELECT SUM(TOTAL) AS SUMA_TOTAL
FROM PEDIDO;

--2.Calcula la cantidad media de todos los pedidos que aparecen en la tabla pedido.
SELECT AVG(TOTAL) AS MEDIA
FROM PEDIDO;

--3.Calcula el número total de comerciales distintos que aparecen en la tabla pedido.
SELECT DISTINCT(ID_COMERCIAL) 
FROM PEDIDO
ORDER BY ID_COMERCIAL;

--4.Calcula el número total de clientes que aparecen en la tabla cliente.
SELECT COUNT(ID) AS CLIENTES
FROM CLIENTE;

--5.Calcula cuál es la mayor cantidad que aparece en la tabla pedido.	
SELECT MAX(TOTAL) AS MAYOR_CANTIDAD
FROM PEDIDO;

--6.Calcula cuál es la menor cantidad que aparece en la tabla pedido.
SELECT MIN(TOTAL) AS MENOR_CANTIDAD
FROM PEDIDO;

--7.Calcula cuál es el valor máximo de categoría para cada una de las ciudades que aparece en la tabla cliente.	
SELECT CIUDAD,MAX(CATEGORÍA)
FROM CLIENTE
WHERE CIUDAD IN (ciudad)
GROUP BY CIUDAD;

--8.Calcula cuál es el máximo valor de los pedidos realizados durante el mismo día para cada uno de los clientes. 
--Es decir, el mismo cliente puede haber realizado varios pedidos de diferentes cantidades el mismo día. 
--Se pide que se calcule cuál es el pedido de máximo valor para cada uno de los días en los que un cliente ha realizado un pedido.
-- Muestra el identificador del cliente, nombre, apellidos, la fecha y el valor de la cantidad.
SELECT ID_CLIENTE, FECHA,MAX(TOTAL)
FROM PEDIDO
GROUP BY ID_CLIENTE, FECHA;
		
--9.Calcula cuál es el máximo valor de los pedidos realizados durante el mismo día para cada uno de los clientes,
-- Teniendo en cuenta que sólo queremos mostrar aquellos pedidos que superen la cantidad de 2000 €.	
SELECT p.id_cliente,c.nombre,p.fecha,MAX(p.total)
FROM PEDIDO P, CLIENTE C
WHERE p.id_cliente=c.id
AND p.total>2000
GROUP BY p.id_cliente,c.nombre,p.fecha;
	
--10.Calcula el máximo valor de los pedidos realizados para cada uno de los comerciales durante la fecha 2016-08-17.
-- Muestra el identificador del comercial, nombre, apellidos y total.
SELECT p.id_comercial,c.nombre,c.apellido1,MAX(p.total)
FROM PEDIDO P, COMERCIAL C
WHERE p.id_comercial=c.id
AND p.fecha='17/08/2016'
GROUP BY p.id_comercial,c.nombre,c.apellido1;

--11.Devuelve un listado con el identificador de cliente, nombre y apellidos y el número total de pedidos 
--que ha realizado cada uno de clientes. Tenga en cuenta que pueden existir clientes que no han realizado ningún pedido. 
--Estos clientes también deben aparecer en el listado indicando que el número de pedidos realizados es 0.	
SELECT p.id_cliente, c.nombre, c.apellido1, NVL(SUM(p.total),'0')AS TOTAL_CLIENTE
FROM PEDIDO P
FULL OUTER JOIN CLIENTE C
ON p.id_cliente=c.id
GROUP BY p.id_cliente,c.nombre,c.apellido1;

--12.Devuelve un listado con el identificador de cliente, nombre y apellidos y el número total de pedidos 
--que ha realizado cada uno de clientes durante el año 2017.
SELECT c.id,c.nombre,c.apellido1,SUM(p.total)as total_para_2017
FROM PEDIDO P, CLIENTE C
where p.id_cliente=c.id
and fecha BETWEEN '01/01/2017' and '31/12/2017'
group by c.id,c.nombre,c.apellido1;

--13.Devuelve un listado que muestre el identificador de cliente, nombre, primer apellido y el valor 
--de la máxima cantidad del pedido realizado por cada uno de los clientes.
-- El resultado debe mostrar aquellos clientes que no han realizado ningún pedido indicando que la máxima cantidad
-- de sus pedidos realizados es 0. Puede hacer uso de la función IFNULL.(NOSOTROS EN ORACLE USAMOS NVL)
SELECT p.id_cliente ,c.nombre, c.apellido1 ,NVL(MAX(p.total),'0')AS MAX_CLIENTE
FROM PEDIDO P
FULL OUTER JOIN CLIENTE C
ON p.id_cliente=c.id
GROUP BY p.id_cliente,c.nombre,c.apellido1;

--14.Devuelve cuál ha sido el pedido de máximo valor que se ha realizado cada año.(MAX TOTAL)
SELECT TO_CHAR(FECHA,'YYYY') AS ANYO, MAX(TOTAL) AS MAX_TOTAL_ANYO
FROM PEDIDO
GROUP BY TO_CHAR(FECHA,'YYYY')

--15.Devuelve el número total de pedidos que se han realizado cada año.(SUM(TOTAL)
SELECT TO_CHAR(FECHA,'YYYY') AS ANYO, SUM(TOTAL) AS TOTAL_PEDIDOS_ANYO
FROM PEDIDO
GROUP BY TO_CHAR(FECHA,'YYYY')	

--Subconsultas
--1.Devuelve un listado con todos los pedidos que ha realizado Adela Salas Díaz. (Sin utilizar INNER JOIN)
SELECT * 
FROM pedido 
WHERE id_cliente = (SELECT id FROM cliente WHERE nombre = 'Adela' AND apellido1 = 'Salas' AND apellido2 = 'Díaz');

--2.Devuelve el número de pedidos en los que ha participado el comercial Daniel Sáez Vega. (Sin utilizar INNER JOIN)
SELECT COUNT(*) as Nºpedidos 
FROM PEDIDO 
WHERE ID_COMERCIAL=(SELECT ID FROM COMERCIAL WHERE NOMBRE='Daniel' AND APELLIDO1='Sáez' AND APELLIDO2='Vega');

--3.Devuelve los datos del cliente que realizó el pedido más caro en el año 2019. (Sin utilizar INNER JOIN)
SELECT* 
FROM cliente 
WHERE id = (SELECT id_cliente FROM pedido WHERE total = (SELECT MAX(total) FROM pedido 
WHERE fecha>='01/01/19' AND fecha<='31/12/19'));

--4.Devuelve la fecha y la cantidad del pedido de menor valor realizado por el cliente Pepe Ruiz Santana.
SELECT MIN(TOTAL)AS MINIMO, FECHA
FROM pedido
WHERE ID_CLIENTE=(SELECT ID FROM CLIENTE WHERE NOMBRE='Pepe' AND APELLIDO1='Ruiz' 
AND APELLIDO2='Santana') AND ROWNUM<=1 GROUP BY FECHA ;

--5.Devuelve un listado con los datos de los clientes y los pedidos, de todos los clientes que han realizado un pedido durante el año 2017 con un 
--valor mayor o igual al valor medio de los pedidos realizados durante ese mismo año.
SELECT *
FROM CLIENTE,PEDIDO
WHERE CLIENTE.ID=ID_CLIENTE AND PEDIDO.FECHA BETWEEN '01/01/2017'AND '31/12/2017'
AND pedido.total>=(SELECT AVG(total) FROM PEDIDO WHERE fecha BETWEEN '01/01/2017'AND '31/12/2017');

--1.3.7.2 Subconsultas con ALL y ANY
--6.Devuelve el pedido más caro que existe en la tabla pedido si hacer uso de MAX, ORDER BY ni LIMIT.
SELECT * 
FROM pedido a 
WHERE a.total >= ALL(SELECT b.total FROM pedido b);

--7.Devuelve un listado de los clientes que no han realizado ningún pedido. (Utilizando ANY o ALL).
SELECT * 
FROM CLIENTE 
WHERE ID != ALL(SELECT ID_CLIENTE FROM PEDIDO);

--8.Devuelve un listado de los comerciales que no han realizado ningún pedido. (Utilizando ANY o ALL).
SELECT * 
FROM COMERCIAL 
WHERE ID !=ALL(SELECT ID_COMERCIAL FROM PEDIDO);

--1.3.7.3 Subconsultas con IN y NOT IN
--9.Devuelve un listado de los clientes que no han realizado ningún pedido. (Utilizando IN o NOT IN).
SELECT * 
FROM CLIENTE 
WHERE ID NOT IN (SELECT ID_CLIENTE FROM PEDIDO);

--10.Devuelve un listado de los comerciales que no han realizado ningún pedido. (Utilizando IN o NOT IN).
SELECT * 
FROM COMERCIAL 
WHERE ID NOT IN (SELECT ID_COMERCIAL FROM PEDIDO);

--1.3.7.4 Subconsultas con EXISTS y NOT EXISTS
--11.Devuelve un listado de los clientes que no han realizado ningún pedido. (Utilizando EXISTS o NOT EXISTS).
SELECT * 
FROM CLIENTE A 
WHERE NOT EXISTS (SELECT ID_CLIENTE);

--12.Devuelve un listado de los comerciales que no han realizado ningún pedido. (Utilizando EXISTS o NOT EXISTS).
SELECT * 
FROM COMERCIAL A 
WHERE NOT EXISTS(SELECT ID_COMERCIAL FROM PEDIDO WHERE ID_COMERCIAL=A.ID);
